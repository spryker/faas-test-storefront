{"version":3,"file":"experience-composition.component.37d643a4.js","sources":["../../../node_modules/@spryker-oryx/experience/composition/src/experience-composition.component.js"],"sourcesContent":["import { __decorate, __metadata } from \"tslib\";\nimport { SSRAwaiterService } from '@spryker-oryx/core';\nimport { ComponentsRegistryService, ExperienceService, LayoutBuilder, } from '@spryker-oryx/experience';\nimport { resolve } from '@spryker-oryx/injector';\nimport { hydratable } from '@spryker-oryx/utilities';\nimport { asyncValue, observe } from '@spryker-oryx/utilities/lit-rxjs';\nimport { html, isServer } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js';\nimport { BehaviorSubject, combineLatest, map, of, switchMap } from 'rxjs';\nimport { ComponentMixin } from '../../src/mixins';\nimport { layoutStyles } from './style';\nlet ExperienceCompositionComponent = class ExperienceCompositionComponent extends ComponentMixin() {\n    constructor() {\n        super();\n        this.uid = '';\n        this.uid$ = new BehaviorSubject(this.uid);\n        this.route = '';\n        this.route$ = new BehaviorSubject(this.route);\n        this.experienceService = resolve(ExperienceService, null);\n        this.registryService = resolve(ComponentsRegistryService);\n        this.ssrAwaiter = resolve(SSRAwaiterService, null);\n        this.hasSSR = false;\n        this.isHydrated = false;\n        this.layoutBuilder = resolve(LayoutBuilder);\n        this.components$ = combineLatest([this.uid$, this.route$]).pipe(switchMap(([uid, route], index) => {\n            /**\n             * Provides ability to rerender components for the same route pattern.\n             */\n            if (index > 0) {\n                this.isHydrated = true;\n            }\n            return (this.experienceService?.getComponent({ uid, route }) ||\n                of({}));\n        }), map((component) => component?.components ?? []));\n        this.hasSSR = !!this.renderRoot;\n    }\n    isEmpty() {\n        /**\n         * Lit is using adoptedStyleSheets native feature for the styles are specified by\n         * static 'styles' property:\n         * https://www.w3.org/TR/cssom-1/#extensions-to-the-document-or-shadow-root-interface\n         * That is not yet supported by safari:\n         * https://caniuse.com/mdn-api_document_adoptedstylesheets\n         *\n         * In result safari uses the common approach and just creates bunch of <style> elements\n         * inside components, that makes them not empty\n         *\n         * To overcome this limitation need to check presence of any other elements\n         * inside component, except for style elements\n         */\n        return !this.renderRoot.querySelector(':not(style)');\n    }\n    shouldRenderChildren() {\n        return (!!this.renderRoot && !this.isEmpty() && !isServer && !this.isHydrated);\n    }\n    // Can be safely used any time on or after calling getUpdateComplete().\n    hydrateOnDemand() {\n        if (!this.isHydrated) {\n            this.isHydrated = true;\n            this.requestUpdate();\n        }\n    }\n    render() {\n        return html `\n      ${asyncValue(this.components$, (components) => this.shouldRenderChildren()\n            ? html `${[...this.renderRoot.children]}`\n            : components\n                ? html `${repeat(components, (component) => component.id, (component) => html `${this.registryService.resolveTemplate(component.type, \n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                component.id, this.getLayoutClasses(component))} `)}\n              ${this.addInlineStyles(components)}`\n                : html ``, () => html `Loading...`)}\n    `;\n    }\n    /**\n     * collects the inline styles for the list of components and writes them\n     * in a `<style>` tag.\n     * The styles are unique to the component and are not reusable, hence it's\n     * ok to render them inline. Rendering them inline will improve loading them\n     * as additional resources, which would cause a layout shift.\n     */\n    addInlineStyles(components) {\n        if (!components)\n            return html ``;\n        const styles = this.layoutBuilder.collectStyles(components);\n        if (styles !== '') {\n            return html `${unsafeHTML(`<style>${styles}</style>`)}`;\n        }\n        return html ``;\n    }\n    /**\n     * returns the CSS classes for the given composition.\n     */\n    getLayoutClasses(component) {\n        if (!component.options?.data) {\n            return undefined;\n        }\n        return this.layoutBuilder.getLayoutClasses(component.options.data);\n    }\n};\nExperienceCompositionComponent.styles = layoutStyles;\n__decorate([\n    state(),\n    __metadata(\"design:type\", Array)\n], ExperienceCompositionComponent.prototype, \"components\", void 0);\n__decorate([\n    property(),\n    __metadata(\"design:type\", Object)\n], ExperienceCompositionComponent.prototype, \"uid\", void 0);\n__decorate([\n    observe(),\n    __metadata(\"design:type\", Object)\n], ExperienceCompositionComponent.prototype, \"uid$\", void 0);\n__decorate([\n    property(),\n    __metadata(\"design:type\", Object)\n], ExperienceCompositionComponent.prototype, \"route\", void 0);\n__decorate([\n    observe(),\n    __metadata(\"design:type\", Object)\n], ExperienceCompositionComponent.prototype, \"route$\", void 0);\nExperienceCompositionComponent = __decorate([\n    hydratable(),\n    __metadata(\"design:paramtypes\", [])\n], ExperienceCompositionComponent);\nexport { ExperienceCompositionComponent };\n//# sourceMappingURL=experience-composition.component.js.map"],"names":["ExperienceCompositionComponent","ComponentMixin","BehaviorSubject","resolve","ExperienceService","ComponentsRegistryService","SSRAwaiterService","LayoutBuilder","combineLatest","switchMap","uid","route","index","_a","of","map","component","isServer","html","asyncValue","components","repeat","styles","unsafeHTML","layoutStyles","__decorate","state","__metadata","property","observe","hydratable"],"mappings":"iYAaG,IAACA,EAAiC,cAA6CC,GAAiB,CAC/F,aAAc,CACV,QACA,KAAK,IAAM,GACX,KAAK,KAAO,IAAIC,EAAgB,KAAK,GAAG,EACxC,KAAK,MAAQ,GACb,KAAK,OAAS,IAAIA,EAAgB,KAAK,KAAK,EAC5C,KAAK,kBAAoBC,EAAQC,EAAmB,IAAI,EACxD,KAAK,gBAAkBD,EAAQE,CAAyB,EACxD,KAAK,WAAaF,EAAQG,EAAmB,IAAI,EACjD,KAAK,OAAS,GACd,KAAK,WAAa,GAClB,KAAK,cAAgBH,EAAQI,CAAa,EAC1C,KAAK,YAAcC,EAAc,CAAC,KAAK,KAAM,KAAK,MAAM,CAAC,EAAE,KAAKC,EAAU,CAAC,CAACC,EAAKC,CAAK,EAAGC,IAAU,OAI/F,OAAIA,EAAQ,IACR,KAAK,WAAa,MAEdC,EAAA,KAAK,oBAAL,YAAAA,EAAwB,aAAa,CAAE,IAAAH,EAAK,MAAAC,CAAK,KACrDG,EAAG,CAAE,CAAA,CACrB,CAAS,EAAGC,EAAKC,GAAS,OAAK,OAAAH,EAAAG,GAAA,YAAAA,EAAW,aAAX,KAAAH,EAAyB,CAAE,EAAA,CAAC,EACnD,KAAK,OAAS,CAAC,CAAC,KAAK,UACxB,CACD,SAAU,CAcN,MAAO,CAAC,KAAK,WAAW,cAAc,aAAa,CACtD,CACD,sBAAuB,CACnB,MAAQ,CAAC,CAAC,KAAK,YAAc,CAAC,KAAK,QAAS,GAAI,CAACI,GAAY,CAAC,KAAK,UACtE,CAED,iBAAkB,CACT,KAAK,aACN,KAAK,WAAa,GAClB,KAAK,cAAa,EAEzB,CACD,QAAS,CACL,OAAOC;AAAAA,QACPC,EAAW,KAAK,YAAcC,GAAe,KAAK,qBAAsB,EAClEF,IAAQ,CAAC,GAAG,KAAK,WAAW,QAAQ,IACpCE,EACIF,IAAQG,EAAOD,EAAaJ,GAAcA,EAAU,GAAKA,GAAcE,IAAQ,KAAK,gBAAgB,gBAAgBF,EAAU,KAEhIA,EAAU,GAAI,KAAK,iBAAiBA,CAAS,CAAC,IAAI;AAAA,gBAClD,KAAK,gBAAgBI,CAAU,IAC7BF,IAAS,IAAMA,aAAiB;AAAA,KAE7C,CAQD,gBAAgBE,EAAY,CACxB,GAAI,CAACA,EACD,OAAOF,IACX,MAAMI,EAAS,KAAK,cAAc,cAAcF,CAAU,EAC1D,OAAIE,IAAW,GACJJ,IAAQK,EAAW,UAAUD,WAAgB,IAEjDJ,GACV,CAID,iBAAiBF,EAAW,OACxB,GAAI,IAACH,EAAAG,EAAU,UAAV,MAAAH,EAAmB,MAGxB,OAAO,KAAK,cAAc,iBAAiBG,EAAU,QAAQ,IAAI,CACpE,CACL,EACAhB,EAA+B,OAASwB,EACxCC,EAAW,CACPC,EAAO,EACPC,EAAW,cAAe,KAAK,CACnC,EAAG3B,EAA+B,UAAW,aAAc,MAAM,EACjEyB,EAAW,CACPG,EAAU,EACVD,EAAW,cAAe,MAAM,CACpC,EAAG3B,EAA+B,UAAW,MAAO,MAAM,EAC1DyB,EAAW,CACPI,EAAS,EACTF,EAAW,cAAe,MAAM,CACpC,EAAG3B,EAA+B,UAAW,OAAQ,MAAM,EAC3DyB,EAAW,CACPG,EAAU,EACVD,EAAW,cAAe,MAAM,CACpC,EAAG3B,EAA+B,UAAW,QAAS,MAAM,EAC5DyB,EAAW,CACPI,EAAS,EACTF,EAAW,cAAe,MAAM,CACpC,EAAG3B,EAA+B,UAAW,SAAU,MAAM,EAC7DA,EAAiCyB,EAAW,CACxCK,EAAY,EACZH,EAAW,oBAAqB,EAAE,CACtC,EAAG3B,CAA8B"}