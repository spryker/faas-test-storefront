import{F as c,r as u,G as l}from"./index-4d2c92b7.js";class a{constructor(s){this.host=s,this.subscriptions=new c,this.observables=new Map,this.context=u("FES.ContextService",null),(this.host=s).addController(this),this.context?.rendered$?.subscribe?.(()=>this.unsubscribe())}hostConnected(){for(const s of this.observables.keys())this.subscribe(s)}hostDisconnected(){this.unsubscribe()}add(s,e){if(!this.observables.has(e)){if(!l(s))throw`Invalid SubscribeController value: incorrect ${s} for SubscribeController, use observable`;this.observables.set(e,{observable$:s,subscription:null})}}subscribe(s){const e=this.observables.get(s);e?.subscription||(e.subscription=e.observable$.subscribe())}unsubscribe(){for(const s of this.observables.values())s.subscription&&(s.subscription.unsubscribe(),s.subscription=null)}}const o=Symbol("subscribeController");function b(r){if(!r[o]){const s={value:new a(r),enumerable:!1,configurable:!0};Object.defineProperty(r,o,s)}}const h=(r,s)=>{const e=r.constructor,t=Symbol(s),n=r.willUpdate;Object.defineProperty(r,s,{get:function(){return this[t]},set:function(i){this[t]||this[o].add(i,s),this[t]=i},configurable:!0}),r.willUpdate=function(i){this[o].hostConnected(),n.call(this,i)},e.addInitializer(i=>{b(i)})},d=(r,s)=>({...r,initializer(){const e=r.initializer?.call(this);return b(this),this[o].add(e,s),e}});function p(){return(r,s)=>{const e=(n,i)=>i!==void 0,t=e(r,s)?s:r.key;return e(r,s)?h(r,t):d(r,t)}}export{p as s};
