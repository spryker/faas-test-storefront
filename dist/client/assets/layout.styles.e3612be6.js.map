{"version":3,"file":"layout.styles.e3612be6.js","sources":["../../../node_modules/@spryker-oryx/experience/composition/src/style/base-layout.styles.js","../../../node_modules/@spryker-oryx/experience/composition/src/style/carousel-layout.styles.js","../../../node_modules/@spryker-oryx/experience/composition/src/style/column-layout.styles.js","../../../node_modules/@spryker-oryx/experience/composition/src/style/container-layout.styles.js","../../../node_modules/@spryker-oryx/experience/composition/src/style/grid-layout.styles.js","../../../node_modules/@spryker-oryx/experience/composition/src/style/sticky-layout.styles.js","../../../node_modules/@spryker-oryx/experience/composition/src/style/layout.styles.js"],"sourcesContent":["import { lgScreen, mdScreen } from '@spryker-oryx/themes/breakpoints';\nimport { css } from 'lit';\nexport const baseLayoutStyles = css `\n  @layer layout {\n    :host {\n      --oryx-layout-height: auto;\n\n      display: flex;\n      flex-direction: column;\n      gap: var(--oryx-layout-gap);\n      align-items: flex-start;\n      margin: var(--oryx-layout-margin, 0);\n      padding: var(--oryx-layout-padding, 0);\n      width: 100%;\n    }\n\n    :host,\n    :host([class*='-layout-']) > * {\n      box-sizing: border-box;\n      min-width: 0;\n      height: auto;\n    }\n\n    :host([class*='-layout-']) > * {\n      width: 100%;\n      height: var(--oryx-layout-height, 100%);\n    }\n\n    :host([class*='-layout-']) > *[class*='has-padding'] {\n      padding: var(--oryx-layout-padding, 0);\n    }\n\n    :host([class*='-layout-']) > *[class*='has-margin'] {\n      margin: var(--oryx-layout-margin, 0);\n      width: calc(100% - (var(--oryx-layout-margin, 0px) * 2));\n      height: calc(\n        var(--oryx-layout-height, 100%) - (var(--oryx-layout-margin, 0px) * 2)\n      );\n    }\n  }\n`;\nexport const layoutMediumScreen = css `\n  :host {\n    --oryx-layout-item-count: 2;\n  }\n`;\nexport const layoutLargeScreen = css `\n  :host {\n    --oryx-layout-item-count: 4;\n  }\n`;\nexport const baseLayoutScreenStyles = [\n    {\n        media: mdScreen,\n        css: layoutMediumScreen,\n    },\n    {\n        media: lgScreen,\n        css: layoutLargeScreen,\n    },\n];\n//# sourceMappingURL=base-layout.styles.js.map","import { css, unsafeCSS } from 'lit';\n/**\n * Provides carousel layout for compositions or components by adding a scrollable\n * element that contains child elements that are divided by item count (`--oryx-layout-item-count`).\n */\nexport const carouselLayout = (breakpoint) => css `\n  :host(.${unsafeCSS(breakpoint)}-layout-carousel) {\n    display: flex;\n    flex-direction: row;\n    overflow-x: auto;\n    overscroll-behavior-x: contain;\n    scroll-snap-type: x mandatory;\n    scroll-behavior: smooth;\n    align-items: stretch;\n  }\n\n  :host(.${unsafeCSS(breakpoint)}-layout-carousel) > * {\n    scroll-snap-align: start;\n    flex: 0 0\n      var(\n        --oryx-layout-item-width,\n        calc(\n          (100% / var(--oryx-layout-item-count, 1) * var(--oryx-layout-span, 1)) -\n            (\n              var(--oryx-layout-gap, 0px) *\n                (var(--oryx-layout-item-count, 1) - 1) /\n                (var(--oryx-layout-item-count, 1) * var(--oryx-layout-span, 1)) +\n                var(--oryx-layout-margin, 0px) * 2\n            )\n        )\n      );\n  }\n`;\n//# sourceMappingURL=carousel-layout.styles.js.map","import { css, unsafeCSS } from 'lit';\n/**\n * Allows to render composition items in a single column. Column items\n * will not wrap to the next line and can have custom widths.\n *\n * The item width added inline in each composition item but default\n * (by browser nature) to a `flex: auto`, which means that they are equally\n * divided over the horizontal axis.\n */\nexport const columnLayout = (breakpoint) => css `\n  :host(.${unsafeCSS(breakpoint)}-layout-column) {\n    display: flex;\n    flex-wrap: nowrap;\n    align-items: flex-start;\n    flex-direction: row;\n  }\n`;\n//# sourceMappingURL=column-layout.styles.js.map","import { css } from 'lit';\n/**\n * Provides a capability to add container to the layout. A container is a centered area on the page that will\n * not let it's children render outside the area. The container width is limited to either 100% of the available\n * space or a global container width (using `--oryx-container-width`).\n *\n * When the container is combined with a jumbotron (spanning the full width), the container margins are mimic with\n * a padding. Please note that this is not bullet proof, as it can cause issues with:\n * - additional composition padding\n * - overflowing of carousel items in the jumbotron space\n */\nexport const containerLayoutStyles = css `\n  :host([class*='-container']:not([class*='-jumbotron'])) {\n    margin: auto;\n    max-width: min(100%, var(--oryx-container-width));\n  }\n\n  :host([class*='-container'][class*='-has-margin']:not([class*='-jumbotron'])) {\n    margin: var(--oryx-layout-margin, 0px)\n      calc(\n        (100% - min(var(--oryx-container-width), 100%)) / 2 +\n          (2 * var(--oryx-layout-margin, 0px))\n      );\n  }\n\n  :host([class*='-container'][class*='-jumbotron'][class*='-has-margin']) {\n    padding-inline: calc(\n      ((100% - var(--oryx-container-width)) / 2) +\n        (2 * var(--oryx-layout-margin, 0px))\n    );\n  }\n\n  :host([class*='-container'][class*='-jumbotron']) {\n    padding-inline: calc((100% - var(--oryx-container-width)) / 2);\n  }\n`;\n//# sourceMappingURL=container-layout.styles.js.map","import { css, unsafeCSS } from 'lit';\n/**\n * Provides style rules for a grid based layout. Grid items are organised over the grid\n * columns, using 4, 2 or 1 column by default.\n */\nexport const gridLayout = (breakpoint) => css `\n  :host(.${unsafeCSS(breakpoint)}-layout-grid) {\n    display: grid;\n    grid-template-rows: repeat(auto-fit, var(--oryx-layout-height));\n    grid-auto-rows: var(--oryx-layout-height, minmax(min-content, max-content));\n    grid-template-columns: repeat(var(--oryx-layout-item-count, 1), 1fr);\n  }\n\n  :host(.${unsafeCSS(breakpoint)}-layout-grid) > * {\n    grid-column: span\n      min(var(--oryx-layout-span, 1), var(--oryx-layout-item-count, 1));\n  }\n`;\n//# sourceMappingURL=grid-layout.styles.js.map","import { css, unsafeCSS } from 'lit';\n/**\n * Provides layout features for stickiness of a composition.\n *\n * We'll use a sticky position in combination with a (default) 0 offset from the top.\n * To avoid a conflict with a lengthy height blocking stickiness, we'll default the height to 0%.\n *\n * We'll force the height to be 0% in case of a sticky layout\n * since stickiness will otherwise stop working.\n *\n */\nexport const stickyLayout = (breakpoint) => css `\n  .${unsafeCSS(breakpoint)}-sticky {\n    position: sticky;\n    top: 0px;\n    height: 0% !important;\n  }\n`;\n//# sourceMappingURL=sticky-layout.styles.js.map","import { lgScreen, mdScreen, smScreen } from '@spryker-oryx/themes/breakpoints';\nimport { css } from 'lit';\nimport { baseLayoutScreenStyles, baseLayoutStyles } from './base-layout.styles';\nimport { carouselLayout } from './carousel-layout.styles';\nimport { columnLayout } from './column-layout.styles';\nimport { containerLayoutStyles } from './container-layout.styles';\nimport { gridLayout } from './grid-layout.styles';\nimport { stickyLayout } from './sticky-layout.styles';\nconst layoutStylesGenerator = (bp) => css `\n  @layer layout {\n    ${stickyLayout(bp)}\n    ${columnLayout(bp)}\n    ${gridLayout(bp)}\n    ${carouselLayout(bp)}\n  }\n`;\n/**\n * the ordering of styles is very important for their correct cascading\n * need to keep the order to prevent wrong priorities of styles,\n * especially for different sizes of the screens\n */\nexport const layoutStyles = [baseLayoutStyles, containerLayoutStyles];\nexport const layoutScreenStyles = [\n    ...baseLayoutScreenStyles,\n    {\n        media: smScreen,\n        css: layoutStylesGenerator(\"sm\" /* Size.Sm */),\n    },\n    {\n        media: mdScreen,\n        css: layoutStylesGenerator(\"md\" /* Size.Md */),\n    },\n    {\n        media: lgScreen,\n        css: layoutStylesGenerator(\"lg\" /* Size.Lg */),\n    },\n];\n//# sourceMappingURL=layout.styles.js.map"],"names":["baseLayoutStyles","css","layoutMediumScreen","layoutLargeScreen","baseLayoutScreenStyles","mdScreen","lgScreen","carouselLayout","breakpoint","unsafeCSS","columnLayout","containerLayoutStyles","gridLayout","stickyLayout","layoutStylesGenerator","bp","layoutStyles","layoutScreenStyles","smScreen"],"mappings":"iGAEY,MAACA,EAAmBC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAuCnBC,EAAqBD;AAAAA;AAAAA;AAAAA;AAAAA,EAKrBE,EAAoBF;AAAAA;AAAAA;AAAAA;AAAAA,EAKpBG,EAAyB,CAClC,CACI,MAAOC,EACP,IAAKH,CACR,EACD,CACI,MAAOI,EACP,IAAKH,CACR,CACL,ECvDaI,EAAkBC,GAAeP;AAAAA,WACnCQ,EAAUD,CAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAUpBC,EAAUD,CAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECPlBE,EAAgBF,GAAeP;AAAAA,WACjCQ,EAAUD,CAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECClBG,EAAwBV;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,ECNxBW,EAAcJ,GAAeP;AAAAA,WAC/BQ,EAAUD,CAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAOpBC,EAAUD,CAAU;AAAA;AAAA;AAAA;AAAA,ECFlBK,EAAgBL,GAAeP;AAAAA,KACvCQ,EAAUD,CAAU;AAAA;AAAA;AAAA;AAAA;AAAA,ECJnBM,EAAyBC,GAAOd;AAAAA;AAAAA,MAEhCY,EAAaE,CAAE;AAAA,MACfL,EAAaK,CAAE;AAAA,MACfH,EAAWG,CAAE;AAAA,MACbR,EAAeQ,CAAE;AAAA;AAAA,EAQVC,EAAe,CAAChB,EAAkBW,CAAqB,EACvDM,EAAqB,CAC9B,GAAGb,EACH,CACI,MAAOc,EACP,IAAKJ,EAAsB,IAAmB,CACjD,EACD,CACI,MAAOT,EACP,IAAKS,EAAsB,IAAmB,CACjD,EACD,CACI,MAAOR,EACP,IAAKQ,EAAsB,IAAmB,CACjD,CACL"}