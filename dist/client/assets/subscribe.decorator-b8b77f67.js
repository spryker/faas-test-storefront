import{F as c,r as u,G as l}from"./index-41c5945f.js";class a{constructor(s){var r,i,o;this.host=s,this.subscriptions=new c,this.observables=new Map,this.context=u("FES.ContextService",null),(this.host=s).addController(this),(o=(i=(r=this.context)==null?void 0:r.rendered$)==null?void 0:i.subscribe)==null||o.call(i,()=>this.unsubscribe())}hostConnected(){for(const s of this.observables.keys())this.subscribe(s)}hostDisconnected(){this.unsubscribe()}add(s,r){if(!this.observables.has(r)){if(!l(s))throw`Invalid SubscribeController value: incorrect ${s} for SubscribeController, use observable`;this.observables.set(r,{observable$:s,subscription:null})}}subscribe(s){const r=this.observables.get(s);r!=null&&r.subscription||(r.subscription=r.observable$.subscribe())}unsubscribe(){for(const s of this.observables.values())s.subscription&&(s.subscription.unsubscribe(),s.subscription=null)}}const n=Symbol("subscribeController");function b(e){if(!e[n]){const s={value:new a(e),enumerable:!1,configurable:!0};Object.defineProperty(e,n,s)}}const h=(e,s)=>{const r=e.constructor,i=Symbol(s),o=e.willUpdate;Object.defineProperty(e,s,{get:function(){return this[i]},set:function(t){this[i]||this[n].add(t,s),this[i]=t},configurable:!0}),e.willUpdate=function(t){this[n].hostConnected(),o.call(this,t)},r.addInitializer(t=>{b(t)})},d=(e,s)=>({...e,initializer(){var i;const r=(i=e.initializer)==null?void 0:i.call(this);return b(this),this[n].add(r,s),r}});function p(){return(e,s)=>{const r=(o,t)=>t!==void 0,i=r(e,s)?s:e.key;return r(e,s)?h(e,i):d(e,i)}}export{p as s};
